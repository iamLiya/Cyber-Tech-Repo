from bottle import Bottle, run, template, request, static_file, redirect, response
import json
import requests

app = Bottle()


# Load or create dataset.json to store student data
def load_data():
    try:
        with open("dataset.json", "r") as file:
            # Check if the file is empty
            if file.readable():
                file.seek(0)  # Move back to the start of the file
                content = file.read().strip()  # Read and strip whitespace
                if not content:  # Check for empty content
                    return {}
                return json.loads(content)  # Load the JSON data
            else:
                return {}
    except (FileNotFoundError, json.JSONDecodeError):
        return {}  # Return an empty dict if the file is not found or JSON is invalid


def save_data(data):
    with open("dataset.json", "w") as file:
        json.dump(data, file)


# Serve static files (CSS)
@app.route('/static/<filename>')
def server_static(filename):
    return static_file(filename, root='./static')


# Redirect the root URL to the registration page
@app.route('/')
def redirect_to_register():
    return redirect('/register')


# Show the registration page
@app.route('/register')
def register():
    return template('views/register')


# Handle registration form submission and redirect to the quiz
@app.route('/register', method='POST')
def handle_register():
    username = request.forms.get('username')
    password = request.forms.get('password')

    # Load existing data
    data = load_data()

    # Check if username already exists
    if username in data:
        return "Username already exists! Try another username."

    # Register the new student
    data[username] = {'password': password, 'quiz_scores': [], 'mcqs': []}
    save_data(data)

    # Set a cookie with the registered user's name
    response.set_cookie("username", username)

    # Redirect to the quiz page
    return redirect(f"/quiz/{username}")


# Show the login page
@app.route('/login')
def login():
    return template('views/login')


# Handle login form submission and redirect to the quiz page
@app.route('/login', method='POST')
def handle_login():
    username = request.forms.get('username')
    password = request.forms.get('password')

    # Load existing data
    data = load_data()

    # Check if username and password match
    if username in data and data[username]['password'] == password:
        response.set_cookie("username", username)
        return redirect(f"/quiz/{username}")
    return "Login failed! Invalid username or password."


# Fetch dataset from Hugging Face API
def fetch_huggingface_dataset():
    url = "https://datasets-server.huggingface.co/rows?dataset=cais%2Fmmlu&config=abstract_algebra&split=test&offset=0&length=100"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data.get("rows", [])
    return []


# Process dataset and extract questions, choices, and answers
def process_dataset(rows):
    questions_data = []
    for row in rows:
        # Use get() to avoid KeyError if a key is missing
        question = row["row"].get("question", "No question available")
        choices = row["row"].get("options", [])  # Modify according to dataset structure
        answer = row["row"].get("answer", "No answer available")

        # Only append if all necessary data is available
        if question and choices and answer:
            questions_data.append({
                "question": question,
                "choices": choices,
                "answer": answer
            })
    return questions_data


# Add the dataset questions to the student's quiz pool
def add_dataset_questions_to_student(student_name, questions_data):
    data = load_data()
    if student_name not in data:
        return "Student not found."

    # Ensure that 'mcqs' field exists for the student
    if 'mcqs' not in data[student_name]:
        data[student_name]['mcqs'] = []

    for question_data in questions_data:
        data[student_name]['mcqs'].append({
            "question": question_data["question"],
            "choices": question_data["choices"],
            "correct": question_data["answer"]
        })

    save_data(data)


# Show the quiz page for the logged-in user
@app.route('/quiz/<username>')
def quiz(username):
    # Ensure the student is logged in by checking the cookie
    logged_in_user = request.get_cookie("username")
    if logged_in_user != username:
        return "Unauthorized access. Please log in."

    # Fetch and add questions from Hugging Face dataset
    dataset_rows = fetch_huggingface_dataset()
    questions_data = process_dataset(dataset_rows)
    add_dataset_questions_to_student(username, questions_data)

    # Load the student's data
    data = load_data()
    student_mcqs = data[username]['mcqs'][:3]  # Assuming a 3-question quiz

    # Pass the username and the quiz questions to the template
    return template('views/quiz', username=username, mcqs=student_mcqs)


# Handle quiz submission and save the score
@app.route('/quiz', method='POST')
def handle_quiz():
    username = request.get_cookie('username')
    data = load_data()

    if username not in data:
        return "Student not found in our database."

    # Retrieve the student's MCQs
    mcqs = data[username]['mcqs'][:3]  # Adjust if necessary

    score = 0
    total_questions = len(mcqs)
    for index, mcq in enumerate(mcqs):
        user_answer = request.forms.get(f'q{index + 1}')
        if user_answer == mcq['correct']:
            score += 1

    # Save the student's quiz score
    data[username]['quiz_scores'].append(score)
    save_data(data)

    return f"Thank you for participating, {username}! You scored {score}/{total_questions}! <a href='/login'>Go back to login</a>"

# Get a student's information by username
@app.route('/api/student/<username>', method='GET')
def get_student_info(username):
    data = load_data()
    
    if username not in data:
        response.status = 404
        return {"error": "Student does not exit!"}
    
    # Return the student information, excluding sensitive data like passwords
    student_info = {
        "username": username,
        "quiz_scores": data[username]['quiz_scores'],
        "mcqs_taken": len(data[username]['mcqs'])
    }
    
    return student_info

if __name__ == "__main__":
    run(app, host='localhost', port=8080, debug=True)
